using System;
using System.Diagnostics;
using System.Runtime.InteropServices;

#set generator = $current_class.generator

/**
 * @class ${current_class.class_name}
 */
#if $current_class.namespace_name or $generator.target_ns
#set $script_namespace=$generator.script_namespace_name_from_native($current_class.namespace_name).replace("::",".")
#if $script_namespace[-1:]=="."
#set $script_namespace= $script_namespace[0:-1]
#end if
namespace ${script_namespace}
{
#end if
public class ${current_class.target_class_name} : #slurp
#if len($current_class.parents)>0
${generator.scriptname_from_native(current_class.parents[0].namespaced_class_name,current_class.parents[0].namespace_name).replace("::",".")}
#else
IDisposable
#end if
{
    public global::System.IntPtr __Instance { get; protected set; }

    public void Dispose()
    {
        Dispose(true);
    }

    protected virtual void Dispose(bool disposing)
    {
        Internal.Destroy(__Instance);
        if(disposing)
            GC.SuppressFinalize(this); 
    }
    
    ~${current_class.target_class_name}()
    {
       Dispose(false);
    }
#if not $current_class.methods.has_key('constructor')
    public ${current_class.target_class_name}()
    {
       __Instance=Internal.ctor();
    }
#end if

