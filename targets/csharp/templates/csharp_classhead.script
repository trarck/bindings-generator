using System;
using System.Diagnostics;
using System.Runtime.InteropServices;

#set generator = $current_class.generator
#set isInterface = $generator.is_interface_class($current_class.class_name)

#if not $isInterface
/**
 * @class ${current_class.class_name}
 */
    #if $current_class.namespace_name or $generator.target_ns
    #set $script_namespace=$generator.script_namespace_name_from_native($current_class.namespace_name).replace("::",".")
    #if $script_namespace[-1:]=="."
    #set $script_namespace= $script_namespace[0:-1]
    #end if
namespace ${script_namespace}
{
    #end if
public class ${current_class.target_class_name} : #slurp
    #set $length = len($current_class.parents)
    #if $length>0
        #set $first = True
        #for $parent in $current_class.parents
            #if $first 
                #set $first = False
            #else
,#slurp
            #end if
${generator.scriptname_from_native($parent.namespaced_class_name,$parent.namespace_name).replace("::",".")} #slurp
        #end for
    #else
IDisposable
    #end if
{
    public global::System.IntPtr __Instance { get; protected set; }

    public void Dispose()
    {
        Dispose(true);
    }

    protected virtual void Dispose(bool disposing)
    {
        Internal.Destroy(__Instance);
        if(disposing)
            GC.SuppressFinalize(this); 
    }
    
    ~${current_class.target_class_name}()
    {
       Dispose(false);
    }
    #if not $current_class.methods.has_key('constructor')
    public ${current_class.target_class_name}()
    {
       __Instance=Internal.ctor();
    }
    #end if

    public ${current_class.target_class_name}(IntPtr instance)
    {
       __Instance=instance;
    }
#else
/**
 * @interface ${current_class.class_name}
 */
    #if $current_class.namespace_name or $generator.target_ns
    #set $script_namespace=$generator.script_namespace_name_from_native($current_class.namespace_name).replace("::",".")
    #if $script_namespace[-1:]=="."
    #set $script_namespace= $script_namespace[0:-1]
    #end if
namespace ${script_namespace}
{
    #end if
public interface ${current_class.target_class_name}
    #set $length = len($current_class.parents)
    #if $length>0
: #slurp
        #set $first = True
        #for $parent in $current_class.parents
            #if $first 
                #set $first = False
            #else
,#slurp
            #end if
${generator.scriptname_from_native($parent.namespaced_class_name,$parent.namespace_name).replace("::",".")} #slurp
        #end for
    #end if
{
#end if

