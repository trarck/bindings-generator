using System;
using System.Diagnostics;
using System.Runtime.InteropServices;

#set generator = $current_class.generator

/**
 * @class ${current_class.class_name}
 */
#if $generator.target_ns
namespace ${generator.target_ns}
{
#end if
public class ${current_class.target_class_name} : #slurp
#if len($current_class.parents)>0
${current_class.parents[0].target_class_name}
#else
IDisposable
#end if
{
    public global::System.IntPtr __Instance { get; protected set; }

    public void Dispose()
    {
        Dispose(true);
    }

    public void Dispose(bool disposing)
    {
        Internal.Destroy(__Instance);
        if(disposing)
            GC.SuppressFinalize(this); 
    }
    
    ~${current_class.target_class_name}()
    {
       Dispose(false);
    }
#if not $current_class.methods.has_key('constructor')
    public ${current_class.target_class_name}()
    {
       __Instance=Internal.ctor();
    }
#end if

