#set $idx = 0
#for func in $implementations
## ===== function name
#if $func.is_constructor
        [DllImport(NativeLib, CallingConvention =CallingConvention.Cdecl,
            EntryPoint="csharp_${generator.prefix}_${class_name}_new_${idx}")]
        internal static extern global::System.IntPtr ctor(#slurp
#else
        [DllImport(NativeLib, CallingConvention =CallingConvention.Cdecl,
            EntryPoint="csharp_${generator.prefix}_${class_name}_${func.func_name}_${idx}")]
        internal static extern $generator.csharp_typename_from_native($func.ret_type) ${func.func_name}(#slurp
#end if
## ===== self point in 
#if not $func.static and not $func.is_constructor
global::System.IntPtr instance#slurp
    #if $func.min_args > 0
,#slurp
    #end if
#end if
## ===== parameters 
    #if $func.min_args > 0
        #set $length = len($func.arguments)
        #set $index = 0
        #for $arg in $func.arguments
            #if $index < $length - 1 
$generator.csharp_typename_from_native($arg) $func.argumtntTips[$index],#slurp
            #else 
$generator.csharp_typename_from_native($arg) $func.argumtntTips[$index]#slurp
            #end if
            #set $index = $index + 1
        #end for
    #end if
);

    #set $idx = $idx + 1
#end for