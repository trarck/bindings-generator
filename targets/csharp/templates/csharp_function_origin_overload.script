#set $idx = 0
## ===== check is interface
#if $is_interface 
    #for func in $implementations
        ## ===== check have object parameter and is generator class
        #set $have_class_parameter=$func.ret_type.is_object and $generator.type_is_class($func.ret_type)
        #if $min_args > 0
            #set $length = len($func.arguments)
            #set $index = 0
            #for $arg in $func.arguments
                #if $arg.is_object and $generator.type_is_class($arg)
                    #set $have_class_parameter=True
                    #break
                #end if
            #end for
        #end if
        #if $have_class_parameter
    $generator.csharp_typename_from_native($func.ret_type) ${generator.script_function_name_format($func.func_name)}(#slurp
        ## ===== include parameters
${generator.parse_class_function_template_file("csharp_function_param_origin.script",$current_class,$func)}#slurp
);
        #end if
    #end for
    #stop
#end if
#for func in $implementations
    ## ===== check have object parameter and is generator class
    #set $have_class_parameter=$func.ret_type.is_object and $generator.type_is_class($func.ret_type)
    #if $min_args > 0
        #set $length = len($func.arguments)
        #set $index = 0
        #for $arg in $func.arguments
            #if $arg.is_object and $generator.type_is_class($arg)
                #set $have_class_parameter=True
                #break
            #end if
        #end for
    #end if
    #if $have_class_parameter
        ## ===== function name
        ##$generator.csharp_typename_from_native($func.ret_type) ${generator.script_function_name_format($func.func_name)}(#slurp
    ${generator.parse_class_function_template_file("csharp_function_name_origin.script",$current_class,$func)}#slurp
        ## ===== parameters 
            #if $func.min_args > 0
                #set $length = len($func.arguments)
                #set $index = 0
                #for $arg in $func.arguments
                    #if $arg.is_object and $generator.type_is_class($arg)
$generator.script_type_class_name($arg).replace("::",".") $func.argumtntTips[$index]#slurp
                    #else
$generator.csharp_typename_from_native($arg) $func.argumtntTips[$index]#slurp
                    #end if
                    #if $index < $length - 1 
,#slurp
                    #end if
                    #set $index = $index + 1
                #end for
            #end if
)
    {
        ## ===== call function
            #if str($func.ret_type) != "void"
            return Internal.${func.func_name}#slurp
            #else
                #if $func.is_constructor
        __Instance=Internal.ctor(#slurp
                #else
        Internal.${func.func_name}(#slurp
                #end if
            #end if
        ## ===== instance parameter
            #if not $func.static and not $func.is_constructor
__Instance#slurp
                #if $func.min_args > 0
,#slurp
                #end if
            #end if
            #if $func.min_args > 0
                #set $index = 0
                #for $arg in $func.arguments
                    #if $arg.is_object and $generator.type_is_class($arg)
${func.argumtntTips[$index]}.__Instance#slurp#slurp
                    #else
${func.argumtntTips[$index]}#slurp
                    #end if
                    #if $index < $length - 1 
,#slurp
                    #end if
                    #set $index = $index + 1
                #end for
            #end if
);
    }

    #end if
    #set $idx = $idx + 1
#end for
