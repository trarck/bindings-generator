#set $idx = 0
## ===== check is interface
#if $is_interface 
    #for func in $implementations
    $generator.csharp_typename_from_native($func.ret_type) ${generator.script_function_name_format($func.func_name)}(#slurp
        ## ===== include parameters
${generator.parse_class_function_template_file("csharp_function_param.script",$current_class,$func)}#slurp
);
    #end for
    #stop
#end if
#for func in $implementations
## ===== function name
    ${generator.parse_class_function_template_file("csharp_function_name.script",$current_class,$func)}#slurp
## ===== parameters 
    #if $func.min_args > 0
        #set $length = len($func.arguments)
        #set $index = 0
        #for $arg in $func.arguments
            #if $index < $length - 1 
$generator.csharp_typename_from_native($arg) $func.argumtntTips[$index],#slurp
            #else 
$generator.csharp_typename_from_native($arg) $func.argumtntTips[$index]#slurp
            #end if
            #set $index = $index + 1
        #end for
    #end if
)
    {
## ===== call function
    #if str($func.ret_type) != "void"
        return Internal.${func.func_name}#slurp
    #else
        #if $func.is_constructor
        __Instance=Internal.ctor(#slurp
        #else
        Internal.${func.func_name}(#slurp
        #end if
    #end if
## ===== instance parameter
    #if not $func.static and not $func.is_constructor
__Instance#slurp
        #if $func.min_args > 0
,#slurp
        #end if
    #end if
    #if $func.min_args > 0
        #set $index = 0
        #for $arg in $func.arguments
            #if $index < $length - 1 
$func.argumtntTips[$index],#slurp
            #else 
$func.argumtntTips[$index]#slurp
            #end if
            #set $index = $index + 1
        #end for
    #end if
);
    }

    #set $idx = $idx + 1
#end for