## ===== check have object parameter and is generator class
#set $have_class_parameter=False
#if $min_args > 0
    #set $length = len($arguments)
    #set $index = 0
    #for $arg in $arguments
        #if $arg.is_object and $generator.type_is_class($arg)
            #set $have_class_parameter=True
            #break
        #end if
    #end for
#end if
#if $have_class_parameter
## ===== function name
    #if $is_constructor
    public ${generator.script_function_name_format($func_name)}(#slurp
    #else
    public $generator.csharp_typename_from_native($ret_type) ${generator.script_function_name_format($func_name)}(#slurp
    #end if
## ===== parameters 
    #if $min_args > 0
        #set $length = len($arguments)
        #set $index = 0
        #for $arg in $arguments
            #if $arg.is_object and $generator.type_is_class($arg)
$generator.script_type_class_name($arg) $argumtntTips[$index]#slurp
            #else
$generator.csharp_typename_from_native($arg) $argumtntTips[$index]#slurp
            #end if
            #if $index < $length - 1 
,#slurp
            #end if
            #set $index = $index + 1
        #end for
    #end if
)
    {
## ===== call function
    #if str($ret_type) != "void"
        return Internal.${func_name}(#slurp
    #else
        #if $is_constructor
        __Instance=Internal.ctor(#slurp
        #else
        Internal.${func_name}(#slurp
        #end if
    #end if
## ===== instance parameter
    #if not $static and not $is_constructor
__Instance#slurp
        #if $min_args > 0
,#slurp
        #end if
    #end if
    #if $min_args > 0
        #set $index = 0
        #for $arg in $arguments
            #if $arg.is_object and $generator.type_is_class($arg)
${argumtntTips[$index]}.__Instance#slurp
            #else
${argumtntTips[$index]}#slurp
            #end if
            #if $index < $length - 1 
,#slurp
            #end if
            #set $index = $index + 1
        #end for
    #end if
);
    }
#end if

