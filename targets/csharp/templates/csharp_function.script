## ===== check is interface
#if $is_interface 
    $generator.csharp_typename_from_native($ret_type) ${generator.script_function_name_format($func_name)}(#slurp
    ## ===== include parameters
    #include os.path.join($generator.target,"templates","csharp_function_param.script")
);
    #stop
#end if
## ===== function name
#if $is_constructor
    public ${generator.script_function_name_format($func_name)}(#slurp
#else
    public $generator.csharp_typename_from_native($ret_type) ${generator.script_function_name_format($func_name)}(#slurp
#end if
## ===== include parameters 
#include os.path.join($generator.target,"templates","csharp_function_param.script")
)
    {
## ===== call function
#if str($ret_type) != "void"
        return Internal.${func_name}(#slurp
#else
    #if $is_constructor
        __Instance=Internal.ctor(#slurp
    #else
        Internal.${func_name}(#slurp
    #end if
#end if
## ===== instance parameter
#if not $static and not $is_constructor
__Instance#slurp
    #if $min_args > 0
,#slurp
    #end if
#end if
#if $min_args > 0
    #set $index = 0
    #set $length = len($arguments)
    #for $arg in $arguments
        #if $index < $length - 1 
$argumtntTips[$index],#slurp
        #else 
$argumtntTips[$index]#slurp
        #end if
        #set $index = $index + 1
    #end for
#end if
);
    }
